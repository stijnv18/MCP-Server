# AGENT INSTRUCTIONS FOR DATABASE SEARCH

**Databases**: BC_VLTS_DATA (assets/projects) and AIM_KANEKA (documents) on kgaprd-sql.gkaneka.local

## CRITICAL: When Tools Fail - DO NOT GIVE UP!
**Be proactive and exploratory**:
- No results? Use `get_distinct_values` to verify data exists
- Tool fails? Try alternative tools for same goal
- Connection issues? Check with `get_databases`
- Start with `get_database_schema` to understand structure
- Try multiple search approaches (tag, SAP, project number)
- Use partial matching with LIKE '%term%' for flexibility

## BC_VLTS_DATA - Assets & Projects

**Assets**: `BCAssetPropertiesViewByNameBCE`
- Tag format: "V 2210 H EPE" (TAG_TYPE + SEQUENCE + DEPARTMENT)
- Departments: MOD, EPE, MSE, SUP (3 chars)
- Exclude retired assets unless requested
- SAP + Project Number = unique identifier

**Projects**: `ProjectPropertiesView`
- RFE- prefix = investment projects
- Use LIKE '%number%' for partial matching
- Plant environment: PROJECT NUMBER = '-'

## AIM_KANEKA - Documents

**Documents**: `DocumentPropertiesViewCoPilot`
- Primary search: DocumentTitle field
- Categories: PID, INV, COM, LAY
- Exclude retired documents unless requested
- Plant environment: c_psProject_ProjectNumber = '-'

**Relationships**: `AssetDocRefViewCoPilot`
- Links assets ↔ documents via ObjectTagRevisionID

## Key Query Patterns

```sql
-- Asset by tag
SELECT * FROM [BC_VLTS_DATA].[dbo].[BCAssetPropertiesViewByNameBCE]
WHERE [TAG TYPE] = 'V' AND [SEQUENCE NUMBER] = '2210 H' AND [DEPARTMENT] = 'EPE'

-- Assets by project
SELECT * FROM [BC_VLTS_DATA].[dbo].[BCAssetPropertiesViewByNameBCE]
WHERE [PROJECT NUMBER] LIKE '%1357%'

-- Investment projects
SELECT * FROM [BC_VLTS_DATA].[dbo].[ProjectPropertiesView]
WHERE [ProjectNumber] LIKE 'RFE-%'

-- Documents by title
SELECT * FROM [AIM_KANEKA].[dbo].[DocumentPropertiesViewCoPilot]
WHERE [c_psDocument_DocumentTitle] LIKE '%search_term%'
```

## Essential Tool Usage

**Core Tools**:
- `get_database_schema` - Understand data structure
- `get_distinct_values` - Explore what data exists
- `get_columns` - Check table structure

**Search Tools**:
- `search_assets` - Find assets by tag/project/category
- `search_projects` - Find projects with filters
- `search_documents` - Find documents by title/category
- `get_asset_details` - Get specific asset info
- `get_project_details` - Get specific project info

**Relationship Tools**:
- `get_related_assets` - Assets for a project
- `get_related_documents` - Documents for project/asset
- `get_assets_for_document` - Assets linked to document

**Advanced Tools**:
- `run_sql` - Custom queries
- `validate_asset_tag` - Check tag format
## Best Practices

**Search Strategy**:
- Use partial matching for flexibility
- Include department codes when relevant
- Filter by RFE for investment projects
- Exclude retired items by default
- Set reasonable limits (default 50)

**Error Recovery**:
- Try alternative tools when one fails
- Use broader search terms if specific fails
- Break complex queries into simpler parts
- Verify data exists with distinct values

**User Interaction**:
- Clarify if asking about asset/document/project
- Explain data sources and filters used
- Suggest alternatives when search fails
- Format results clearly

**Performance**:
- Apply filters to reduce result sets
- Use LIMIT to avoid overwhelming results
- Consider multiple focused queries for large datasets

## AI Agent Rules

**PERSISTENCE**: Never stop at first failure - try 2-3 approaches minimum

**EXPLORATION**: When tool fails → immediately try alternative achieving same goal

**COMMUNICATION**: Explain attempts, suggest alternatives, ask clarifying questions

**FALLBACKS**:
- search_assets fails → try get_asset_details
- search_documents fails → try get_related_documents
- Specific tool fails → use run_sql
- Complex fails → break into simpler queries